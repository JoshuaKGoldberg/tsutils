new (class T {
    foo(): T { return this; }
})();
new (class T {
           ~ [Unused]
})();
new (class T<T> {
           ~ [Unused]
    foo(): T { return null!; }
})();

export class Outer<T> {
                   ~ [Unused]
    constructor() {
        class Inner<T> {
              ~~~~~ [Unused]
            static foo(): T {} // gives compile error, but resolves to Inner's T
        }
    }
}

let fn: any;
let v;
export class C {
    @fn((param) => v = param)
    public method(param, v) {
                  ~~~~~ [Unused]
                         ~ [Unused]
    }
}

type T = any;
     ~ [Unused]
@function(...args: any[]) {
             ~~~~ [Unused]
    let tmp: T;
        ~~~ [Unused]
}
class Foo<T, U> {}
      ~~~ [Unused]
             ~ [Unused]
