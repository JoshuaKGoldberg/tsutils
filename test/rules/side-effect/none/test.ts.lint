let foo = 'foo';
if (foo = 'bar')
    ~~~~~~~~~~~ [0]
    throw foo;
if (foo === 'baz')
    throw foo;

for (let i = 0; i < 10; ++i)
                        ~~~ [0]
    console.log(i += 1);
    ~~~~~~~~~~~~~~~~~~~ [0]
                ~~~~~~ [0]

({} instanceof Object);
'toString' in {};

declare let fn: Function;

`template`;
`template with ${'interpolation'}`;
`template with side effect: ${fn()}`;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
                              ~~~~ [0]
fn`tagged template`;
fn`tagged template with ${'interpolation'}`;
fn`tagged template with side effect: ${fn()}`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
                                       ~~~~ [0]
fn()`tagged template with call`;
~~~~ [0]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]

void !(<string>fn() as 'foo');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [0]
     ~~~~~~~~~~~~~~~~~~~~~~~~ [0]
      ~~~~~~~~~~~~~~~~~~~~~~~ [0]
       ~~~~~~~~~~~~~~~~~~~~~ [0]
       ~~~~~~~~~~~~ [0]
               ~~~~ [0]

var j = 0;
j--;
~~~ [0]
j++;
~~~ [0]
--j;
~~~ [0]
!j;
-+~j;
fn()!;
~~~~ [0]
~~~~~ [0]

new Object;
new Object();
new Object(1);
new Object(fn());
~~~~~~~~~~~~~~~~ [0]
           ~~~~ [0]
new (fn())();
~~~~~~~~~~~~ [0]
    ~~~~~~ [0]
     ~~~~ [0]

typeof [,];
typeof fn();
~~~~~~~~~~~ [0]
       ~~~~ [0]
[...[], ...fn()];
~~~~~~~~~~~~~~~~ [0]
        ~~~~~~~ [0]
           ~~~~ [0]
[1, fn()];
~~~~~~~~~ [0]
    ~~~~ [0]
({prop: foo});
({prop: fn()});
~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~ [0]
        ~~~~ [0]
({...{}});
({...fn()});
~~~~~~~~~~~ [0]
 ~~~~~~~~~ [0]
     ~~~~ [0]
({[foo]: foo});
({[fn()]: foo});
~~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~~ [0]
   ~~~~ [0]

foo.length;
fn().length;
~~~~~~~~~~~ [0]
~~~~ [0]

foo['length'];
foo[fn()];
~~~~~~~~~ [0]
    ~~~~ [0]
fn()['length'];
~~~~~~~~~~~~~~ [0]
~~~~ [0]

foo > fn();
~~~~~~~~~~ [0]
      ~~~~ [0]
fn().length !== j;
~~~~ [0]
~~~~~~~~~~~ [0]
~~~~~~~~~~~~~~~~~ [0]

foo ? 1 : 0;
fn() ? 1 : 0;
~~~~~~~~~~~~ [0]
~~~~ [0]
foo ? fn() : 0;
~~~~~~~~~~~~~~ [0]
      ~~~~ [0]
foo ? 1 : fn();
~~~~~~~~~~~~~~ [0]
          ~~~~ [0]

(class {});
(class extends fn() {});
~~~~~~~~~~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~~~~~~~~~~ [0]
               ~~~~ [0]
(class {prop = 1});
(class {prop = fn()});
~~~~~~~~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~~~~~~~~ [0]
               ~~~~ [0]
(class {[foo] = foo});
(class {[fn()] = foo});
~~~~~~~~~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~~~~~~~~~ [0]
         ~~~~ [0]
(class implements Object {});
(class {[foo]() {}});
(class {[fn()]() {}});
~~~~~~~~~~~~~~~~~~~~~ [0]
 ~~~~~~~~~~~~~~~~~~~ [0]
         ~~~~ [0]

[0]: has side effect
